#ifndef FLYBY_UI_H_DEFINED
#define FLYBY_UI_H_DEFINED

#include "flyby_hamlib.h"

struct tle_db_entry {
	long satellite_number;
	char name[MAX_NUM_CHARS];
	char line1[MAX_NUM_CHARS];
	char line2[MAX_NUM_CHARS];
};

struct tle_db {
	int num_tles;
	struct tle_db_entry tles[MAX_NUM_SATS];
	char filename[MAX_NUM_CHARS];
};

struct sat_db_entry {
	long satellite_number;
	bool squintflag;
	double alat;
	double alon;
	int num_transponders;
	char transponder_name[MAX_NUM_TRANSPONDERS][MAX_NUM_CHARS];
	double uplink_start[MAX_NUM_TRANSPONDERS];
	double uplink_end[MAX_NUM_TRANSPONDERS];
	double downlink_start[MAX_NUM_TRANSPONDERS];
	double downlink_end[MAX_NUM_TRANSPONDERS];
	unsigned char dayofweek[MAX_NUM_TRANSPONDERS];
	int phase_start[MAX_NUM_TRANSPONDERS];
	int phase_end[MAX_NUM_TRANSPONDERS];
};

struct transponder_db {
	int num_sats;
	struct sat_db_entry sats[MAX_NUM_SATS];
	char filename[MAX_NUM_CHARS];
	bool loaded;
};

/* This function quits ncurses, resets and "beeps"
   the terminal, and displays an error message (string)
   when we need to bail out of the program in a hurry. */
void bailout(char *string);

/* This function scans line 1 and line 2 of a NASA 2-Line element
   set and returns a 1 if the element set appears to be valid or
   a 0 if it does not.  If the data survives this torture test,
   it's a pretty safe bet we're looking at a valid 2-line
   element set and not just some random text that might pass
   as orbital data based on a simple checksum calculation alone. */
char KepCheck(char *line1, char *line2);

/* This function updates PREDICT's orbital datafile from a NASA
   2-line element file either through a menu (interactive mode)
   or via the command line.  string==filename of 2-line element
   set if this function is invoked via the command line. */
int AutoUpdate(char *string, struct tle_db *_tle_db, predict_orbital_elements_t **orbits);

int Select(int num_orbits, struct tle_db_entry *tle_db, predict_orbital_elements_t **orbital_elements_array);

/* This function buffers and displays orbital predictions
   and allows screens to be saved to a disk file. */
int Print(const char *title, const char *string, char mode);

/* This function acts as a filter to display passes that could
   possibly be visible to the ground station.  It works by first
   buffering prediction data generated by the Predict() function
   and then checking it to see if at least a part of the pass
   is visible.  If it is, then the buffered prediction data
   is sent to the Print() function so it can be displayed
   to the user and optionally logged to a file. */
int PrintVisible(const char *title, const char *string);

/* This function predicts satellite passes.  It displays
   output through the Print() function if mode=='p' (show
   all passes), or through the PrintVisible() function if
   mode=='v' (show only visible passes). */
void Predict(const char *name, predict_orbital_elements_t *orbital_elements, predict_observer_t *qth, char mode);

enum celestial_object{PREDICT_SUN, PREDICT_MOON};
void PredictSunMoon(enum celestial_object object, predict_observer_t *qth);

/* This function permits displays a satellite's orbital
   data.  The age of the satellite data is also provided. */
void ShowOrbitData(int num_orbits, struct tle_db_entry *tle_db, predict_orbital_elements_t **orbital_elements_array);

void QthEdit(const char *qthfile, predict_observer_t *qth);

/* This function tracks a single satellite in real-time
   until 'Q' or ESC is pressed. */
void SingleTrack(bool once_per_second, double horizon, int orbit_ind, int num_orbits, predict_orbital_elements_t **orbital_elements_array, predict_observer_t *qth, struct sat_db_entry *sat_db_entries, struct tle_db_entry *tle_db_entries, rotctld_info_t *rotctld, rigctld_info_t *downlink_info, rigctld_info_t *uplink_info);

void MultiTrack(predict_observer_t *qth, int num_orbits, predict_orbital_elements_t **orbital_elements_array, struct tle_db_entry *tle_db, char multitype, char disttype);

void Illumination(const char *name, predict_orbital_elements_t *orbital_elements);

/*
 * Print the main menu to screen.
 **/
void MainMenu();

void ProgramInfo(bool once_per_second, double horizon, const char *qthfile, struct tle_db *tle_db, struct transponder_db *transponder_db, rotctld_info_t *rotctld);

void NewUser();

void RunFlybyUI(bool new_user, const char *qthfile, predict_observer_t *observer, struct tle_db *tle_db, struct transponder_db *sat_db, rotctld_info_t *rotctld, rigctld_info_t *downlink, rigctld_info_t *uplink);

#endif
